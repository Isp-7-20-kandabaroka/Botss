import telebot
from telebot import types
from datetime import datetime, timedelta

def calculate_expiration_date():
    current_date = datetime.now()
    expiration_date = current_date + timedelta(days=30)
    return expiration_date.strftime('%d-%m-%Y')
bot = telebot.TeleBot('6440127056:AAGA3j1W4tbS6lJIst8jNGj09c5FoK_j47k')
global_variable = False
users = {}
states = {}
schedule = {
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 17:00-18:00': ['CHOREO'],
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 18:00-19:00': ['FRAME UP STRIP'],
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 19:00-20:00': ['LADY'],
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 20:00-21:00': ['HEELS']
    },
    '–í—Ç–æ—Ä–Ω–∏–∫': {
        '–í—Ç–æ—Ä–Ω–∏–∫ 18:00-19:00': ['STRIP'],
        '–í—Ç–æ—Ä–Ω–∏–∫ 19:00-20:00': ['CHOREO TEAM'],
        '–í—Ç–æ—Ä–Ω–∏–∫ 17:00-18:00': ['HIP-HOP'],
        '–í—Ç–æ—Ä–Ω–∏–∫ 20:00-21:00': ['FEMALE']
    },
    '–°—Ä–µ–¥–∞': {
        '–°—Ä–µ–¥–∞ 18:00-19:00': ['FRAME UP STRIP'],
        '–°—Ä–µ–¥–∞ 19:00-20:00': ['LADY'],
        '–°—Ä–µ–¥–∞ 20:00-21:00': ['HEELS']
    },
    '–ß–µ—Ç–≤–µ—Ä–≥': {
        '–ß–µ—Ç–≤–µ—Ä–≥ 17:00-18:00': ['CHOREO'],
        '–ß–µ—Ç–≤–µ—Ä–≥ 18:00-19:00': ['STRIP'],
        '–ß–µ—Ç–≤–µ—Ä–≥ 19:00-20:00': ['CHOREO TEAM'],
        '–ß–µ—Ç–≤–µ—Ä–≥ 20:00-21:00': ['FEMALE']
    },
    '–ü—è—Ç–Ω–∏—Ü–∞': {
        '–ü—è—Ç–Ω–∏—Ü–∞ 17:00-18:00': ['HIP-HOP'],
        '–ü—è—Ç–Ω–∏—Ü–∞ 18:00-19:30': ['HIP-HOP'],
        '–ü—è—Ç–Ω–∏—Ü–∞ 19:30-20:30': ['STRETCHING']
    },
    '–°—É–±–±–æ—Ç–∞': {
        '–°—É–±–±–æ—Ç–∞ 17:00-18:30': ['DANCEHALL']
    },
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': {
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 15:30-17:30': ['HEELS TEAM'],
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 18:00-19:00': ['CHOREO TEAM']
    }
}


@bot.message_handler(commands=['start', 'help'])
def start(message):
    chat_id = message.chat.id

    if chat_id not in users:
        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(message, process_name_step)
    else:
        bot.send_message(chat_id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {users[chat_id]['name']}!")
        commands = [
            "/buy_abonement - –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
            "/choose_training_day - –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            "/personal_cabinet - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "/change_name - –°–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
        ]
        bot.send_message(chat_id, "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands))


@bot.message_handler(commands=['change_name'])
def change_name(message):
    chat_id = message.chat.id
    if chat_id in users:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(message, process_change_name_step)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


def process_change_name_step(message):
    chat_id = message.chat.id
    new_name = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ —Å–ª–æ–≤–∞—Ä–µ users
    users[chat_id]['name'] = new_name

    bot.send_message(chat_id, f"–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {new_name}! üéâ")


def process_name_step(message):
    chat_id = message.chat.id
    name = message.text

    users[chat_id] = {'name': name, 'abonements': {}}

    bot.send_message(chat_id, f"ü§ù –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!")
    commands = [
        "/buy_abonement - –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
        "/choose_training_day - –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n",
        "/personal_cabinet - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
        "/change_name - –°–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"


    ]
    bot.send_message(chat_id, "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands))




def process_training_day_step(message):
    chat_id = message.chat.id
    training_day = message.text

    if len(users[chat_id]['abonements']) == 0:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy_abonement.")
    else:
        keyboard = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)

        for time, groups in schedule[training_day].items():
            button_text = f"{time} {', '.join(groups)}"
            keyboard.add(types.KeyboardButton(button_text))

        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_training_group_step)


def process_training_group_step(message):
    global global_variable
    chat_id = message.chat.id
    training_group = message.text.split()[1]

    abonement = next(iter(users[chat_id]['abonements']))
    remaining_trainings = users[chat_id]['abonements'].get(abonement, 0)

    if remaining_trainings <= 0:
        bot.send_message(chat_id, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy_abonement.")
    else:
        global_variable = False
        users[chat_id]['abonements'][abonement] = remaining_trainings - 1

        name = users[chat_id]['name']
        group_info = f"üë• –ì—Ä—É–ø–ø–∞ –∏ –í—Ä–µ–º—è: {' '.join(message.text.split()[0:])}\n" \
                     f"üéüÔ∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {abonement}\n" \
                     f"üî• –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {remaining_trainings - 1}\n" \
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}\n"

    bot.send_message(-1001954553072, group_info)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    users[chat_id]['expiration_date'] = datetime.now() + timedelta(days=30)

    commands = [
        "/buy_abonement - –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
        "/personal_cabinet - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    ]

    message_text = f"‚úÖ –í–´ –ó–ê–ü–ò–°–ê–ù–´\n\n{group_info}\n\n–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ \n/choose_training_day\n\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands)
    bot.send_message(chat_id, message_text)



@bot.message_handler(commands=['personal_cabinet'])
def personal_cabinet(message):
    chat_id = message.chat.id

    name = users[chat_id]['name']

    abonements = ""
    for abonement, remaining_trainings in users[chat_id]['abonements'].items():
        expiration_date = calculate_expiration_date()  # Calling a function to calculate the abonement expiration date
        abonements += f"{abonement}:\n- –û—Å—Ç–∞–ª–æ—Å—å {remaining_trainings} –∑–∞–Ω—è—Ç–∏–π\n- –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {expiration_date}\n\n"

    message_text = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}\n\n–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n{abonements}\n\n–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ /change_name"
    bot.send_message(chat_id, message_text)

@bot.message_handler(commands=['buy_abonement'])
def buy_abonement(message):
    chat_id = message.chat.id
    existing_abonements = users[chat_id]['abonements']

    if any(remaining_trainings > 0 for remaining_trainings in existing_abonements.values()):
        bot.send_message(chat_id, "–£ –≤–∞—Å —É–∂–µ –∫—É–ø–ª–µ–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ.")
    else:
        process_new_abonement(message)

def process_new_abonement(message):
    chat_id = message.chat.id
    keyboard = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton("4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–µ—Å—è—Ü 1800—Ä"))
    keyboard.add(types.KeyboardButton("8 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 2800—Ä"))
    keyboard.add(types.KeyboardButton("12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 3800—Ä"))
    keyboard.add(types.KeyboardButton("16 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 4800—Ä"))
    keyboard.add(types.KeyboardButton("–ë–µ–∑–ª–∏–º–∏—Ç 5800—Ä"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(message, process_abonement_step)

def check_abonement_expiry(chat_id):
    if 'expiration_date' in users[chat_id]:
        expiration_date = users[chat_id]['expiration_date']
        if expiration_date <= datetime.now():
            users[chat_id]['abonements'] = {}
            bot.send_message(chat_id, "–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏—Ç–µ –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /buy_abonement.")


def process_abonement_step(message):
    chat_id = message.chat.id
    abonement = message.text
    global global_variable
    abonements = {
        '4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–µ—Å—è—Ü 1800—Ä': 4,
        '8 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 2800—Ä': 8,
        '12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 3800—Ä': 12,
        '16 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 4800—Ä': 16,
        '–ë–µ–∑–ª–∏–º–∏—Ç 5800—Ä': 30
    }

    users[chat_id]['abonements'][abonement] = 0

    payment_options = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    payment_options.add(types.KeyboardButton("–û–ø–ª–∞—Ç–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º"), types.KeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_options)
    bot.register_next_step_handler(message, process_payment_step)

@bot.message_handler(commands=['choose_training_day'])
def choose_training_day(message):
    chat_id = message.chat.id
    abonement = next(iter(users[chat_id]['abonements']))
    global global_variable
    if global_variable:
        if abonement == "4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–µ—Å—è—Ü 1800—Ä":
                users[chat_id]['abonements'][abonement] = 4
        if abonement == "8 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 2800—Ä":
                users[chat_id]['abonements'][abonement] = 8
        if abonement == "12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 3800—Ä":
            users[chat_id]['abonements'][abonement] = 12
        if abonement == "16 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü 4800—Ä":
            users[chat_id]['abonements'][abonement] = 16
        if abonement == "–ë–µ–∑–ª–∏–º–∏—Ç 5800—Ä":
            users[chat_id]['abonements'][abonement] = 30

    if len(users[chat_id]['abonements']) == 0:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy_abonement.")
    else:
        keyboard = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
                     types.KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫"),
                     types.KeyboardButton("–°—Ä–µ–¥–∞"),
                     types.KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥"),
                     types.KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞"),
                     types.KeyboardButton("–°—É–±–±–æ—Ç–∞"),
                     types.KeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"))

        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_training_day_step)



def process_payment_step(message):
    chat_id = message.chat.id
    payment_system = message.text
    name = users[chat_id]['name']
    abonement = next(iter(users[chat_id]['abonements']))

    if payment_system == '–û–ø–ª–∞—Ç–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º':
        bot.send_message(chat_id,
                         "üè¶ –ù–∞ –∫–∞—Ä—Ç—É, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ –Ω–æ–º–µ—Ä—É 89514635201 (–°–±–µ—Ä–±–∞–Ω–∫/–¢–∏–Ω—å–∫–æ—Ñ—Ñ) –ê–ª–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞ –ö. üí≥\n\n–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤. ‚åõ\n\n –ö–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /choose_training_day\n—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        payment_confirmation = types.InlineKeyboardMarkup()
        payment_confirmation.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", callback_data='payment_confirmed'))
        bot.send_message(-1001954553072,
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}\n\n –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º, –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É:\n\n{abonement}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:",
                         reply_markup=payment_confirmation)
    elif payment_system == '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏':
        bot.send_message(chat_id,
                         "–û—Ç–ª–∏—á–Ω–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –∞–¥—Ä–µ—Å—É –ø—Ä. –õ–µ–Ω–∏–Ω–∞ 21–≤, –æ—Ñ. 508! üñ§")
        payment_confirmation = types.InlineKeyboardMarkup()
        payment_confirmation.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", callback_data='payment_confirmed'))
        bot.send_message(-1001954553072,
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}\n\n –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏, –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É:\n\n{abonement}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:",
                         reply_markup=payment_confirmation)
    else:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã. üòï")

@bot.callback_query_handler(func=lambda call: True)
def handle_payment_confirmation(call):
    chat_id = call.message.chat.id
    global global_variable


    if call.data == 'payment_confirmed':
        bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! üéâ")

        # Remove the buttons and messages
        if call.message.reply_to_message is not None:
            bot.delete_message(call.message.chat.id, call.message.reply_to_message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        global_variable = True

    else:
        bot.send_message(chat_id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_id = call.from_user.id
    user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} {call.from_user.last_name}\n"
    if call.data == 'payment_confirmed':
        user_info += "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω,—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /choose_training_day.\n"
    else:
        user_info += "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
    bot.send_message(user_id, user_info)


@bot.message_handler(commands=['use'])
def handle_use_training(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /use_training.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, "/use_training –ò–≤–∞–Ω"
    name = message.text.split()[1]

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é use_training, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã message –∏ name
    use_training(message, name)



def use_training(message, name):
    chat_id = message.chat.id

    user_found = False
    for user_id, user_data in users.items():
        if user_data['name'] == name:
            user = user_data
            user_found = True
            break

    if not user_found:
        bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if len(user['abonements']) == 0:
        bot.send_message(chat_id, "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")
        return

    abonement = next(iter(user['abonements']))
    remaining_trainings = user['abonements'][abonement]

    if remaining_trainings <= 0:
        bot.send_message(chat_id, "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return

    user['abonements'][abonement] = remaining_trainings - 1


    message_text = f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∞–Ω–∞ —É {name}. –û—Å—Ç–∞–ª–æ—Å—å {remaining_trainings - 1} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ {abonement}.\n–ê–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {calculate_expiration_date()}"
    bot.send_message(chat_id, message_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å—ã–≤–∞—é—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    bot.send_message(user_id, f"‚úÖ –í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å {remaining_trainings - 1} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ {abonement}.\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –Ω–∞–∂–º–∏—Ç–µ /personal_cabinet")


bot.infinity_polling()

